
/*
===============================================================================
Stored Procedure: Load Silver Layer (Bronze -> Silver)
===============================================================================
*/

CREATE OR ALTER PROCEDURE Silver.load_Silver AS
BEGIN

DECLARE  @start_time DATETIME, @end_time  DATETIME, @batch_start_time DATETIME, @batch_end_time DATETIME
BEGIN TRY
SET @batch_start_time = GETDATE();
PRINT 'LOADING Silver LAYER: FIRST CRM TABLES'
    SET @start_time = GETDATE();
	TRUNCATE TABLE  [Silver].crm_cust_info

	INSERT INTO Silver.crm_cust_info ([cst_id]
      ,[cst_key]
      ,[cst_firstname]
      ,[cst_lastname]
      ,[cst_marital_status]
      ,[cst_gndr]
      ,[cst_create_date])

SELECT [cst_id],
[cst_key],
TRIM(cst_firstname) AS cst_firstname,
TRIM(cst_lastname) AS cst_firstname,

CASE WHEN UPPER (TRIM(cst_marital_status)) = 'S' THEN 'Single'
     WHEN UPPER (TRIM(cst_marital_status)) = 'M' THEN 'Married'
	 ELSE 'n/a'
	 END cst_marital_status,

CASE WHEN UPPER (TRIM(cst_gndr)) = 'F' THEN 'Female'
     WHEN UPPER (TRIM(cst_gndr)) = 'M' THEN 'Male'
	 ELSE 'n/a'
	 END [cst_gndr],
[cst_create_date]
FROM (SELECT *,
ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) as flag
FROM Bronze.crm_cust_info WHERE cst_id IS NOT NULL) t WHERE flag = 1;
	SET @end_time = GETDATE();
	print'duration:  ' + CAST (DATEDIFF(Second,@start_time ,@end_time) AS NVARCHAR) + 'sec'
	TRUNCATE TABLE  [Silver].[crm_prd_info]
	SET @start_time = GETDATE();
	INSERT INTO Silver.[crm_prd_info] ([prd_id]
      ,[prd_key]
	  ,cat_id
      ,[prd_nm]
      ,[prd_cost]
      ,[prd_line]
      ,[prd_start_dt]
      ,[prd_end_dt])

SELECT [prd_id],
	  REPLACE (SUBSTRING(prd_key,1,5), '-', '_') AS cat_id,
	  SUBSTRING(prd_key,7,LEN(prd_key)) AS prd_key
      ,[prd_nm]
      ,ISNULL([prd_cost],0) AS prd_cost,
	  CASE UPPER(TRIM([prd_line]))
	  WHEN 'M' then 'Mountain'
	  WHEN 'R' then 'Road'
	  WHEN 'S' then 'Other Sales'
	  WHEN 'T' then 'Touring'
	  ELSE 'N/A'
	  END AS prd_line
     
      ,CAST([prd_start_dt] AS DATE) AS prd_start_dt
      ,CAST(LEAD (prd_start_dt) OVER (PARTITION BY prd_key Order BY prd_start_dt)-1 AS DATE) as prd_end_dt
	  FROM Bronze.crm_prd_info;

		SET @end_time = GETDATE();
	print'duration:  ' + CAST (DATEDIFF(Second,@start_time ,@end_time) AS NVARCHAR) + 'sec'
	TRUNCATE TABLE  [Silver].[crm_cust_info]
	SET @start_time = GETDATE();
	INSERT INTO Silver.[crm_sales_details] ([sls_ord_num]
      ,[sls_prd_key]
      ,[sls_cust_id]
      ,[sls_order_dt]
      ,[sls_ship_dt]
      ,[sls_due_dt]
      ,[sls_sales]
      ,[sls_quantity]
      ,[sls_price])

SELECT [sls_ord_num]
      ,[sls_prd_key]
      ,[sls_cust_id]
      ,CASE WHEN [sls_order_dt] = 0 or len (sls_order_dt) != 8 Then null
	  else CAST (CAST (sls_order_dt as varchar) as date) end as sls_order_dt
	  ,CASE WHEN sls_ship_dt = 0 or len (sls_ship_dt) != 8 Then null
	  else CAST (CAST (sls_ship_dt as varchar) as date) end as sls_ship_dt
	  ,CASE WHEN sls_due_dt = 0 or len (sls_due_dt) != 8 Then null
	  else CAST (CAST (sls_due_dt as varchar) as date) end as sls_due_dt
      
	
      ,[sls_quantity]


	  ,CASE WHEN sls_sales IS NULL OR sls_sales <= 0  or sls_quantity != sls_quantity * ABS(sls_price)
	  then sls_quantity * ABS(sls_price)
	  else sls_sales
	  end as sls_sales

	  ,CASE WHEN sls_price is null or sls_price <= 0 THEN sls_sales / NULLIF(sls_quantity, 0)
	  ELSE sls_price 
	  end as sls_price

	  FROM Bronze.crm_sales_details;

	PRINT 'LOADING Silver LAYER: SECOND ERP TABLES'
		SET @end_time = GETDATE();
	print'duration:  ' + CAST (DATEDIFF(Second,@start_time ,@end_time) AS NVARCHAR) + 'sec'
	TRUNCATE TABLE  [Silver].erp_cust_az12
	SET @start_time = GETDATE();
	INSERT INTO Silver.[erp_cust_az12] ([cid]
      ,[bdate]
      ,[gen])

SELECT
case when cid like 'NAS%' THEN SUBSTRING(cid, 4, len(cid))
else cid
end as cid

      , CASE WHEN bdate > getdate() then null
	  else bdate
	  END AS bdate,
      
	  CASE WHEN UPPER(TRIM(gen)) IN ('F', 'Female') then 'Female'
	       WHEN UPPER(TRIM(gen)) IN ('M', 'Male') then 'Male'
		   ELSE 'n/a'
		   END AS gen

	  FROM Bronze.[erp_cust_az12];
		SET @end_time = GETDATE();
	print'duration:  ' + CAST (DATEDIFF(Second,@start_time ,@end_time) AS NVARCHAR) + 'sec'
	TRUNCATE TABLE  [Silver].erp_loc_a101
	SET @start_time = GETDATE();
	INSERT INTO Silver.[erp_loc_a101] (
[cid]
      ,[cntry]
)

SELECT
replace([cid], '-', '') as cid
      ,CASE WHEN TRIM(cntry) = 'DE' THEN 'Germany'
	        when TRIM(cntry) in ('US', 'USA') then 'United States'
			WHEN TRIM(cntry) = '' or cntry is null THEN 'n/a'
			else TRIM(cntry)
			end as cntry

	  FROM Bronze.[erp_loc_a101];
		SET @end_time = GETDATE();
	print'duration:  ' + CAST (DATEDIFF(Second,@start_time ,@end_time) AS NVARCHAR) + 'sec'
	TRUNCATE TABLE  [Silver].erp_px_cat_g1v2
	SET @start_time = GETDATE();
	INSERT INTO Silver.[erp_px_cat_g1v2] (
[id]
      ,[cat]
      ,[subcat]
      ,[maintenance]
)

SELECT
[id]
      ,[cat]
      ,[subcat]
      ,[maintenance]
	  FROM Bronze.[erp_px_cat_g1v2];
	SET @end_time = GETDATE();
	print'duration:  ' + CAST (DATEDIFF(Second,@start_time ,@end_time) AS NVARCHAR) + 'sec'
	SET @batch_end_time = GETDATE();
		print'duration of the ehole Silver layer:  ' + CAST (DATEDIFF(Second,@batch_start_time ,@batch_end_time) AS NVARCHAR) + 'sec'


		END TRY
BEGIN CATCH
  PRINT 'ERROR IN LOADING THE Silver LAYER'
  PRINT 'ERROR MESSAGE' + ERROR_MESSAGE();
  PRINT 'ERROR MESSAGE' + CAST(ERROR_NUMBER() AS NVARCHAR);
  PRINT 'ERROR MESSAGE' + CAST(ERROR_STATE() AS NVARCHAR);
END CATCH 
END
